<?php
/**
 * Test class for Testy_Project.
 * Generated by PHPUnit on 2011-10-23 at 17:54:53.
 */
class Testy_ProjectTest extends PHPUnit_Framework_TestCase {

    /**
     * Project name
     *
     * @var string
     */
    const PROJECT_NAME = 'Testy_Test';

    /**
     * @var Testy_Project
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Testy_Project(self::PROJECT_NAME);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }

    /**
     * Test adding a notifier
     */
    public function testAddNotifier() {
        $this->assertInstanceOf('Testy_Project', $this->object->addNotifier($this->getMock('Testy_Notifier_Stdout')));
    }

    /**
     * Test getting the project-name
     */
    public function testGetName() {
        $this->assertEquals(self::PROJECT_NAME, $this->object->getName());
    }

    /**
     * Test setting a config
     */
    public function testConfig() {
        try {
            $this->object->config(new stdClass());
            $this->fail('An exception should be raised, when setting the test-config');
        }
        catch(Exception $e) {
            $this->assertStringEndsWith(self::PROJECT_NAME, $e->getMessage());
        }
    }

    /**
     * Test the check command
     *
     * @depends testAddNotifier
     */
    public function testCheck() {
        $oConfig = new stdClass();
        $oConfig->test = 'cd /tmp';
        $oConfig->path = '/tmp';
        $oConfig->find = '*';

        $this->assertInstanceOf('Testy_Project', $this->object->config($oConfig));
        $this->assertInstanceOf('Testy_Project', $this->object->check(0));
        $this->assertNotEmpty($this->object->getFiles());
    }

    /**
     * Test run
     *
     * @depends testCheck
     */
    public function testRun() {
        $this->assertInstanceOf('Testy_Project', $this->object->run());
    }

    /**
     * @depends testAddNotifier
     */
    public function testNotify() {
        $this->assertInstanceOf('Testy_Project', $this->object->notify('', ''));
    }
}
