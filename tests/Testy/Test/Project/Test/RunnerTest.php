<?php
/**
 * Test class for \Testy\Project\Test\Runner.
 * Generated by PHPUnit on 2011-12-03 at 18:39:21.
 */
namespace Testy\Test\Project\Test;

class RunnerTest extends \PHPUnit_Framework_TestCase {
    /**
     * Project name
     *
     * @var string
     */
    const PROJECT_NAME = 'Testy_Test';

    /**
     * @var \Testy\Project\Test\Runner
     */
    protected $_object;

    /**
     * @var \Testy\Project
     */
    protected $_oProject;

    /**
     * The config
     *
     * @var \stdClass
     */
    protected $_oConfig;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp() {
        $this->_setup();
    }

    /**
     * Setup the object
     *
     * @param  string $sCommand
     *
     * @return void
     */
    protected function _setup($sCommand = '') {
        $sCommand = ((empty($sCommand) === true) ? ('cd /tmp; echo ' . \Testy\Project\Test\Runner::FILE_PLACEHOLDER . ' > /dev/null') : $sCommand);

        $this->_oConfig = new \stdClass();
        $this->_oConfig->test = $sCommand;
        $this->_oConfig->path = '/tmp';
        $this->_oConfig->find = '*';

        $this->_oProject = new \Testy\Project(self::PROJECT_NAME);
        $this->assertInstanceOf('\Testy\Project', $this->_oProject->config($this->_oConfig));
        $this->assertInstanceOf('\Testy\Project', $this->_oProject->setCommand(\Testy\Test\Helper\Command::getSuccess()));
        $this->_object = new \Testy\Project\Test\Runner($this->_oProject, array(
            __FILE__
        ), $this->_oConfig);
    }

    /**
     * Test, if a single-execution is detected
     */
    public function testExecuteSingle() {
        $this->assertTrue($this->_object->executeSingle());

        $sCommand = 'cd /tmp;';
        $this->_setup($sCommand);
        $this->assertFalse($this->_object->executeSingle());
    }

    /**
     * Test setting repeat
     */
    public function testRepeat() {
        $this->assertInstanceOf('\\Testy\\Project\\Test\\Runner', $this->_object->repeat());
    }

    /**
     * Test running the runnter
     */
    public function testRun() {
        $this->assertInstanceOf('\\Testy\\Project\\Test\\Runner', $this->_object->run());
        $this->assertEquals(1, $this->_object->getCommands());
    }

    /**
     * Test getting the result
     */
    public function testGet() {
        $this->assertEquals('', $this->_object->get());
    }

    /**
     * Test multiple files
     */
    public function testMultiple() {
        $aFiles = array(
            __FILE__,
            __DIR__ . DIRECTORY_SEPARATOR . 'ExceptionTest.php'
        );
        $oRunner = new \Testy\Project\Test\Runner($this->_oProject, $aFiles, $this->_oConfig);
        $oRunner->run(\Testy\Test\Helper\Command::getSuccess());

        $this->assertEquals(count($aFiles), $oRunner->getCommands());
    }

    /**
     * Test passing the command as string
     */
    public function testSetCommand() {
        $aFiles = array(
            __FILE__,
            __DIR__ . DIRECTORY_SEPARATOR . 'ExceptionTest.php'
        );

        $oRunner = new \Testy\Project\Test\Runner($this->_oProject, $aFiles, $this->_oConfig);
        $oRunner->setCommand('echo $file')->run();

        $this->assertEquals(count($aFiles), $oRunner->getCommands());
        $this->assertEquals('echo ' . end($aFiles), $oRunner->getLastCommand());
    }

    /**
     * Test the result, if a command does not succeed
     */
    public function testCommandFailure() {
        $aFiles = array(
            __FILE__,
        );

        try {

            $this->assertInstanceOf('\\Testy\\Project', $this->_oProject->setCommand(\Testy\Test\Helper\Command::getFailure()));
            $oRunner = new \Testy\Project\Test\Runner($this->_oProject, $aFiles, $this->_oConfig);
            $oRunner->setCommand('./' . uniqid())->run();
            $this->fail('An exception should have been thrown');
        }
        catch (\Testy\Project\Test\Exception $e) {
            $this->assertEquals('', $e->getMessage());
        }
    }
}
