<?php

/**
 * Test class for \Testy\Watch.
 * Generated by PHPUnit on 2011-10-22 at 23:00:50.
 */
namespace Testy\Test;

class WatchTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var \Testy\Watch
     */
    protected $_object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp() {
        $this->_object = new \Testy\Watch();
        $this->assertEmpty($this->_object->getStack());
    }

    /**
     * Test that a disabled project will not be added
     */
    public function testAddNotEnabled() {
        $this->assertInstanceOf('\\Testy\\Watch', $this->_object->add(\Testy\Test\Helper\Project::getDisabled()));
        $this->assertEmpty($this->_object->getStack());
    }

    /**
     * Test simple add call and that a added project will be removed
     */
    public function testAddAndRemove() {
        $this->assertInstanceOf('\\Testy\\Watch', $this->_object->add(\Testy\Test\Helper\Project::getEnabled()));
        $this->assertNotEmpty($this->_object->getStack());

        $this->assertInstanceOf('\\Testy\\Watch', $this->_object->add(\Testy\Test\Helper\Project::getDisabled()));
        $this->assertEmpty($this->_object->getStack());
    }

    /**
     * Test the loop-call
     */
    public function testLoop() {
        $oMock = new \stdClass();
        $oMock->adapter = 'file';
        $oMock->config = new \stdClass();
        $oMock->config->path = '/tmp';

        $this->assertInstanceOf('\\Testy\\Watch', $this->_object->loop($oMock, 2));
    }

    /**
     * Test the loop-call
     */
    public function testLoopException() {
        $this->setExpectedException('\\Testy\\Exception', \Testy\Exception::MISSING_TRANSPORT);
        $oMock = new \stdClass();
        $this->assertInstanceOf('\\Testy\\Watch', $this->_object->loop($oMock, 2));
    }
}
